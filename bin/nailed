#!/usr/bin/env ruby

require "trollop"
require File.join(File.expand_path("..", File.dirname(__FILE__)), "lib", "nailed")
require File.join(File.expand_path("..", File.dirname(__FILE__)), "db", "database")

opts = Trollop::options do
  opt :migrate, "Migrate/Upgrade database", :short => 'm'
  opt :bugzilla, "Refresh bugzilla database records", :short => 'b'
  opt :github, "Refresh github database records", :short => 'g'
  opt :jenkins, "Refresh jenkins database records", :short => 'j'
  opt :list, "List github repositories within organization", :type => :string, :short => 'l'
  opt :server, "Start a dashboard webinterface", :short => 's'
end

abort("try nailed -h") if opts.all?{|k, v| v.is_a?(FalseClass)}

if opts[:server_given]
  if Nailed.get_config["products"].nil?
    abort("Add some data, there is nothing to be shown")
  else
    begin
      `#{File.join(File.expand_path("..", File.dirname(__FILE__)), "bin", "app")}`
    rescue Interrupt
      sleep 2
      exit
    end
  end
end

opts.each_pair do |key, val|
  case key
  when :migrate
    if val
      print "Are you sure? This will create new tables, new columns, but not change anything existing. (y/n) "
      if gets.strip == "y"
        Product.auto_upgrade!
        Bugreport.auto_upgrade!
        Bugtrend.auto_upgrade!
        AllbugTrend.auto_upgrade!
        L3Trend.auto_upgrade!
        Organization.auto_upgrade!
        Repository.auto_upgrade!
        Pullrequest.auto_upgrade!
        Pulltrend.auto_upgrade!
        AllpullTrend.auto_upgrade!
        JenkinsParameter.auto_upgrade!
        JenkinsParameterValue.auto_upgrade!
        JenkinsBuild.auto_upgrade!
        github_client = Nailed::Github.new
        Nailed.fill_db_after_migration(github_client.client)
        Nailed.log("info", "Database migrated")
        abort "Database migrated"
      end
    end
  when :bugzilla
    if val
      bugzilla_client = Nailed::Bugzilla.new
      bugzilla_client.get_bugs
      bugzilla_client.write_bug_trends
      bugzilla_client.write_allbug_trends
      bugzilla_client.write_l3_trends
    end
  when :github
    if val
      github_client = Nailed::Github.new
      github_client.update_pull_states
      github_client.get_open_pulls
      github_client.write_allpull_trends
    end
  when :jenkins
    if val
      jenkins_client = Nailed::Jenkins.new
      jenkins_client.update_parameters
      jenkins_client.update_build_numbers
      jenkins_client.update_build_details
    end
  when :list
    if val
      begin
        github_client = Nailed::Github.new
        Nailed.list_org_repos(github_client.client, val)
      rescue
      end
    end
  end
end

