#!/usr/bin/env ruby

require "sinatra/base"
require "sinatra/assetpack"
require "sinatra/advanced_routes"
require "haml"
require "json"
require "time"
require File.join(File.expand_path("..", File.dirname(__FILE__)), "lib", "nailed")
require File.join(File.expand_path("..", File.dirname(__FILE__)), "db", "database")

class App < Sinatra::Base
  register Sinatra::AdvancedRoutes

  ROOT_PATH = File.join(File.expand_path("..", File.dirname(__FILE__)))
  set :root, File.join(ROOT_PATH, "lib")
  set :public_folder, File.join(ROOT_PATH, "public")
  set :views, File.join(ROOT_PATH, "views")
  set :bind, "0.0.0.0"
  set :port, Nailed::Config["port"] || 4567
  theme = Nailed::Config["theme"] || "default"

  register Sinatra::AssetPack

  assets do
    serve "/js",        from: "../public/vendor/js"
    serve "/customjs",  from: "../public/js"
    serve "/css",       from: "../public/vendor/css"
    serve "/customcss", from: "../public/css"
    serve "/images",    from: "../public/images"

    js :jquery, "/js/external/jquery-1.11.2.min.js", [
      "/js/external/jquery-1.11.2.js"
    ]
    js :bootstrap, "/js/bootstrap/bootstrap.min.js", [
      "/js/bootstrap/bootstrap.js"
    ]
    js :bootstrap_table, "/js/bootstrap/bootstrap-table.min.js", [
      "/js/bootstrap/bootstrap-table.js"
    ]
    js :morris, "/js/morris/morris.min.js", [
      "/js/morris/morris.js",
      "/js/morris/raphael.js"
    ]
    js :customjs, [
      "/customjs/bugzilla.js",
      "/customjs/github.js",
      "/customjs/index.js",
      "/customjs/nailed.js"
    ]

    css :bootstrap, "/css/bootstrap/#{theme}/bootstrap.min.css", [
      "/css/bootstrap/#{theme}/bootstrap.css"
    ]
    css :bootstrap_table, "/css/bootstrap/bootstrap-table.min.css", [
      "/css/bootstrap/bootstrap-table.css"
    ]
    css :morris, [
      "/css/morris/morris.css"
    ]
    css :material, "/css/material/material.min.css", [
      "/css/material/material.css"
    ]
    css :customcss, [
      "/customcss/nailed.css"
    ]

    js_compression  :jsmin
    css_compression :simple
  end

  before do
    @title = Nailed::Config["title"] || "Dashboard"
    @products = Nailed::Config.products.map { |_p, v| v["versions"] }.flatten.compact
    @product_query = @products.join("&product=")
    @org_query = Nailed::Github.orgs.map { |o| o.prepend("user%3A") }.join("+")
    @colors = Nailed.get_colors
  end

  helpers do
    ### generic helpers

    def get_trends(action, item)
      json = []
      case action
      when :bug
        table = "bugtrends"
        trends =
          if Bugtrend.count(product_name: item) > 20
            sql_statement = "SELECT (SELECT COUNT(0) " \
                            "FROM #{table} t1 " \
                            "WHERE t1.id <= t2.id " \
                            "AND product_name = '#{item}') " \
                            "AS tmp_id, time, open, fixed, product_name " \
                            "FROM #{table} AS t2 " \
                            "WHERE product_name = '#{item}' " \
                            "AND (tmp_id % ((SELECT COUNT(*) " \
                            "FROM #{table} " \
                            "WHERE product_name = '#{item}')/20) = 0) " \
                            "ORDER BY id"
            Bugtrend.repository(:default).adapter.select(sql_statement)
          else
            sql_statement = "SELECT time, open, fixed " \
                            "FROM #{table} " \
                            "WHERE product_name = '#{item}'"
            Bugtrend.repository(:default).adapter.select(sql_statement)
          end
        trends.each do |col|
          json << { time: col.time, open: col.open, fixed: col.fixed }
        end
      when :pull
        table = "pulltrends"
        trends =
          if (Pulltrend.count(repository_organization_oname: item[0], repository_rname: item[1]) > 20)
            sql_statement = "SELECT (SELECT COUNT(0) " \
                            "FROM #{table} t1 " \
                            "WHERE t1.id <= t2.id AND repository_rname = '#{item[1]}' " \
                            "AND repository_organization_oname = '#{item[0]}')" \
                            "AS tmp_id, time, open, repository_rname " \
                            "FROM #{table} AS t2 " \
                            "WHERE repository_rname = '#{item[1]}' " \
                            "AND repository_organization_oname = '#{item[0]}' " \
                            "AND (tmp_id % ((SELECT COUNT(*) " \
                            "FROM #{table} WHERE repository_rname = '#{item[1]}' " \
                            "AND repository_organization_oname = '#{item[0]}')/20) = 0)" \
                            "ORDER BY id"
            Pulltrend.repository(:default).adapter.select(sql_statement)
          else
            sql_statement = "SELECT time, open " \
                            "FROM #{table} " \
                            "WHERE repository_rname = '#{item[1]}' " \
                            "AND repository_organization_oname = '#{item[0]}'"
            Pulltrend.repository(:default).adapter.select(sql_statement)
          end
        trends.each do |col|
          json << { time: col.time, open: col.open }
        end
      when :allpulls
        table = "allpull_trends"
        filter =
          if AllpullTrend.count > 20
            "WHERE (id % ((SELECT COUNT(*) " \
            "FROM #{table})/20) = 0) " \
            "OR (id = (SELECT MAX(id) FROM #{table}));"
          else
            ""
          end
        trends = AllbugTrend.repository(:default).adapter.select("SELECT * FROM #{table} #{filter}")
        trends.each do |col|
          json << { time: col.time, open: col.open }
        end
      when :allbugs
        table = "allbug_trends"
        sql_statement = "SELECT * " \
                        "FROM (SELECT * FROM #{table} ORDER BY time) " \
                        "GROUP BY date(time)"
        trends = AllbugTrend.repository(:default).adapter.select(sql_statement)
        trends.each do |col|
          json << { time: col.time, open: col.open }
        end
      when :l3
        table = "l3_trends"
        filter =
          if L3Trend.count > 20
            "WHERE (id % ((SELECT COUNT(*) FROM #{table})/20) = 0)"
          else
            ""
          end
        trends = L3Trend.repository(:default).adapter.select("SELECT * FROM #{table} #{filter}")
        trends.each do |col|
          json << { time: col.time, open: col.open }
        end
      end
      json.to_json
    end

    ### github helpers

    def get_github_repos
      Repository.all
    end
  end

  #
  # BUGZILLA Routes
  #

  #
  # bar
  #
  Nailed::Config.products.each do |_product, values|
    versions = values["versions"]
    versions.each do |version|
      get "/json/bugzilla/#{version.tr(" ", "_")}/bar/priority" do
        bugprio = []
        { "P0 - Crit Sit" => "p0",
          "P1 - Urgent"   => "p1",
          "P2 - High"     => "p2",
          "P3 - Medium"   => "p3",
          "P4 - Low"      => "p4",
          "P5 - None"     => "p5" }.each_pair do |key, val|
          bugprio << { "bugprio" => key, val => Bugreport.count(product_name: version, priority: key, is_open: true) }
        end
        bugprio.to_json
      end
    end unless versions.nil?
  end
  #
  # status
  #
  Nailed::Config.products.each do |_product, values|
    versions = values["versions"]
    versions.each do |version|
      get "/json/bugzilla/#{version.tr(" ", "_")}/bar/status" do
        bugstatus = []
        { "NEW"         => 's0',
          "CONFIRMED"   => 's1',
          "IN_PROGRESS" => 's2',
          "REOPENED"    => 's3' }.each_pair do |key, val|
          bugstatus << { "bugstatus" => key, val => Bugreport.count(product_name: version, status: key, is_open: true) }
        end
        bugstatus.to_json
      end
    end unless versions.nil?
  end

  #
  # trends
  #
  Nailed::Config.products.each do |_product, values|
    versions = values["versions"]
    versions.each do |version|
      get "/json/bugzilla/#{version.tr(" ", "_")}/trend/open" do
        get_trends(:bug, version)
      end
    end unless versions.nil?
  end

  get "/json/bugzilla/trend/allopenl3" do
    get_trends(:l3, nil)
  end

  get "/json/bugzilla/trend/allbugs" do
    get_trends(:allbugs, nil)
  end

  #
  # donut
  #
  Nailed::Config.products.each do |_product, values|
    versions = values["versions"]
    versions.each do |version|
      get "/json/bugzilla/#{version.tr(" ", "_")}/donut/component" do
        top5_components = []
        sql_statement = "SELECT component AS label, " \
                        "COUNT(component) AS value " \
                        "FROM bugreports " \
                        "WHERE product_name = '#{version}' " \
                        "AND is_open = 't' " \
                        "GROUP BY component " \
                        "ORDER BY COUNT(component) " \
                        "DESC LIMIT 5"
        components = repository(:default).adapter.select(sql_statement)
        components.each do |bar|
          top5_components << { label: bar.label, value: bar.value }
        end
        component_labels = top5_components.map { |a| a.values[0] }
        component_values = top5_components.map { |a| a.values[1] }
        top5_components.to_json
      end
    end unless versions.nil?
  end

  get "/json/bugzilla/donut/allbugs" do
    bugtop = []
    Nailed::Config.products.each do |_product, values|
      versions = values["versions"]
      versions.each do |version|
        open = Bugreport.count(product_name: version, is_open: true)
        bugtop << { label: version, value: open } unless open == 0
      end unless versions.nil?
    end
    bugtop.to_json
  end

  #
  # tables
  #

  # allopen
  get "/json/bugzilla/allopen" do
    Bugreport.all(is_open: true).to_json
  end

  # allopenwithoutl3
  get "/json/bugzilla/allopenwithoutl3" do
    (Bugreport.all(is_open: true) - Bugreport.all(:whiteboard.like => "%openL3%", :is_open => true)).to_json
  end

  # allopenl3
  get "/json/bugzilla/allopenl3" do
    Bugreport.all(:is_open => true, :whiteboard.like => "%openL3%").to_json
  end

  # product -> openwithoutl3
  Nailed::Config.products.each do |_product, values|
    versions = values["versions"]
    versions.each do |version|
      get "/json/bugzilla/#{version.tr(" ", "_")}/openwithoutl3" do
        (Bugreport.all(is_open: true, product_name: version) - Bugreport.all(:whiteboard.like => "%openL3%", :is_open => true, :product_name => version)).to_json
      end
    end unless versions.nil?
  end

  # product -> openl3
  Nailed::Config.products.each do |_product, values|
    versions = values["versions"]
    versions.each do |version|
      get "/json/bugzilla/#{version.tr(" ", "_")}/openl3" do
        Bugreport.all(:is_open => true, :product_name => version, :whiteboard.like => "%openL3%").to_json
      end
    end unless versions.nil?
  end

  # product -> closedwithoutl3
  Nailed::Config.products.each do |_product, values|
    versions = values["versions"]
    versions.each do |version|
      get "/json/bugzilla/#{version.tr(" ", "_")}/closedwithoutl3" do
        (Bugreport.all(is_open: false, product_name: version) - Bugreport.all(:whiteboard.like => "%openL3%", :is_open => false, :product_name => version)).to_json
      end
    end unless versions.nil?
  end

  # product -> closedl3
  Nailed::Config.products.each do |_product, values|
    versions = values["versions"]
    versions.each do |version|
      get "/json/bugzilla/#{version.tr(" ", "_")}/closedl3" do
        Bugreport.all(:is_open => false, :product_name => version, :whiteboard.like => "%openL3%").to_json
      end
    end unless versions.nil?
  end

  #
  # GITHUB Routes
  #

  #
  # trends
  #
  github_repos = Pullrequest.all(order: [:created_at.desc]).map do |row|
    [row.repository_organization_oname, row.repository_rname]
  end.uniq

  github_repos.each do |repo|
    get "/json/github/#{repo[0]}/#{repo[1]}/trend/open" do
      get_trends(:pull, repo)
    end
  end

  # all open pull requests
  get "/json/github/trend/allpulls" do
    get_trends(:allpulls, nil)
  end

  #
  # donut
  #
  get "/json/github/donut/allpulls" do
    pulltop = []
    allpulls = Pullrequest.all(state: "open").aggregate(:repository_organization_oname, :repository_rname, :all.count)
    allpulls.each do |donut_bite|
      pulltop << { label: "#{donut_bite[0]}/#{donut_bite[1]}", value: donut_bite[2] }
    end
    pulltop.to_json
  end

  #
  # tables
  #

  # allopenpulls
  get "/json/github/allopenpulls" do
    Pullrequest.all(state: "open").to_json
  end

  # all open pull requests for repo
  github_repos = Pullrequest.all(state: "open", order: [:created_at.desc]).map do |row|
    [row.repository_organization_oname, row.repository_rname]
  end.uniq

  github_repos.each do |repo|
    get "/json/github/#{repo[0]}/#{repo[1]}/open" do
      Pullrequest.all(
        state:                         "open",
        repository_rname:              repo[1],
        repository_organization_oname: repo[0]).to_json
    end
  end

  #
  # MAIN Routes
  #

  get "/" do
    @github_repos = get_github_repos

    haml :index
  end

  Nailed::Config.products.each do |_product, values|
    versions = values["versions"]
    versions.each do |version|
      get "/#{version.tr(" ", "_")}/bugzilla" do
        @github_repos = get_github_repos

        @product = version
        @product_ = version.tr(" ", "_")
        @top5 = values["qe"]

        haml :bugzilla
      end
    end unless versions.nil?
  end

  github_repos = Pullrequest.all(order: [:created_at.desc]).map do |row|
    [row.repository_organization_oname, row.repository_rname]
  end.uniq

  github_repos.each do |repo|
    get "/github/#{repo[0]}/#{repo[1]}" do
      @github_repos = get_github_repos

      @repo = repo[1]
      @org = repo[0]
      @github_url_all_pulls = "https://github.com/#{@org}/#{repo}/pulls"

      haml :github
    end
  end

  get "/json/help" do
    routes = []
    App.each_route do |route|
      routes << { route: route.path } if route.path.is_a? String
    end
    routes.uniq.to_json
  end

  get "/help" do
    @github_repos = get_github_repos

    haml :help
  end

  run! if app_file == $PROGRAM_NAME
end
